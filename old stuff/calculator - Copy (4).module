<?php

/**
  * @file
  * Allows visitors to calculate price difference of trip.
  */
  
/**
 * Implements hook_menu().
 */
function calculator_menu() {
  $items = array();

  $items['airport/calculator'] = array(
    'title' => 'Trip Calculator',
    'description' => 'Configure calculation information for trip calculator.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('calculator_simplest'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}
  
/**
 * Basic AJAX callback example.
 *
 * Simple form whose ajax-enabled 'changethis' member causes a text change
 * in the description of the 'replace_textfield' member.
 *
 * See @link http://drupal.org/node/262422 Form API Tutorial @endlink
 */
function calculator_simplest($form, &$form_state) {
  $form = array();
  $form['changethis'] = array(
    '#title' => t("Choose something and explain why"),
    '#type' => 'select',
    '#options' => array(
      '1' => 'one',
      '2' => 'two',
      '3' => 'three',
    ),
    '#ajax' => array(
      // #ajax has two required keys: callback and wrapper.
      // 'callback' is a function that will be called when this element changes.
      'callback' => 'calculator_simplest_callback',
      // 'wrapper' is the HTML id of the page element that will be replaced.
      'wrapper' => 'replace_textfield_div',
      // There are also several optional keys - see calculator_autocheckboxes
      // below for details on 'method', 'effect' and 'speed' and
      // calculator_dependent_dropdown for 'event'.
    ),
  );
  
  $form['addthis'] = array(
    '#title' => t("Choose something and explain why"),
    '#type' => 'select',
    '#options' => array(
      '1' => 'one',
      '2' => 'two',
      '3' => 'three',
    ),
    '#ajax' => array(
      // #ajax has two required keys: callback and wrapper.
      // 'callback' is a function that will be called when this element changes.
      'callback' => 'calculator_simplest_callback',
      // 'wrapper' is the HTML id of the page element that will be replaced.
      'wrapper' => 'replace_textfield_div',
      // There are also several optional keys - see calculator_autocheckboxes
      // below for details on 'method', 'effect' and 'speed' and
      // calculator_dependent_dropdown for 'event'.
    ),
  );

  // This entire form element will be replaced whenever 'changethis' is updated.
  $form['replace_textfield'] = array(
    '#type' => 'textfield',
    '#title' => t("Why"),
    // The prefix/suffix provide the div that we're replacing, named by
    // #ajax['wrapper'] above.
    '#prefix' => '<div id="replace_textfield_div">',
    '#suffix' => '</div>',
  );

  $addthis = $form_state['values']['changethis'];
  $tothis = $form_state['values']['addthis'];
  
  // An AJAX request calls the form builder function for every change.
  // We can change how we build the form based on $form_state.
  if (!empty($form_state['values']['changethis'])) {
    $form['replace_textfield']['#description'] = t("Your total is: '@value'", array('@value' => $addthis + $tothis));
  }
  return $form;
}

/**
 * Callback for calculator_simplest.
 *
 * On an ajax submit, the form builder function is called again, then the $form
 * and $form_state are passed to this callback function so it can select which
 * portion of the form to send on to the client.
 *
 * @return array
 *   Renderable array (the textfield element)
 */
function calculator_simplest_callback($form, $form_state) {
  // The form has already been submitted and updated. We can return the replaced
  // item as it is.
  return $form['replace_textfield'];
}
